package entity;import service.FastWinningCheck;import strategy.WinningStrategy;import java.util.List;public class TicTacToe {    private final List<Player> players;    private final Board board;    private Player winner;    private GameState gameState;    private int nextPlayerIdx;    private final WinningStrategy winningStrategy;    private TicTacToe(TicTacToeBuilder builder) {        this.nextPlayerIdx = -1;        this.winningStrategy = new FastWinningCheck(builder.board.getDimension());        this.players = builder.players;        this.board = builder.board;        this.winner = builder.winner;        this.gameState = builder.gameState;    }    public Player getNextPlayer() {        nextPlayerIdx++;        nextPlayerIdx %= players.size();        return players.get(nextPlayerIdx);    }    public Board getBoard() {        return board;    }    public GameState getGameState() {        return gameState;    }    public Player getWinner() {        return winner;    }    public WinningStrategy getWinningStrategy() {        return winningStrategy;    }    public static TicTacToeBuilder getBuilder() {        return new TicTacToeBuilder();    }    public void makeMove(int row, int col, Player player) {        board.fillTheMove(row, col, player);        if (winningStrategy.checkWinner(row, col, player)) {            this.gameState = GameState.WIN;            this.winner = player;        }    }    public static class TicTacToeBuilder {        private List<Player> players;        private Board board;        private Player winner;        private GameState gameState;        public TicTacToeBuilder setPlayers(List<Player> players) {            this.players = players;            return this;        }        public TicTacToeBuilder setBoard(Board board) {            this.board = board;            return this;        }        public TicTacToeBuilder setWinner(Player winner) {            this.winner = winner;            return this;        }        public TicTacToeBuilder setMatchState(GameState gameState) {            this.gameState = gameState;            return this;        }        public TicTacToe build() {            return new TicTacToe(this);        }    }}