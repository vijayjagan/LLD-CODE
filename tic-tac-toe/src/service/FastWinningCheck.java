package service;import entity.Player;import strategy.WinningStrategy;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;public class FastWinningCheck implements WinningStrategy {    private int dimension;    private final Map<String, Integer> leftDiagonal;    private final Map<String, Integer> rightDiagonal;    private final List<Map<String, Integer>> horizontal;    private final List<Map<String, Integer>> vertical;    public FastWinningCheck(int n) {       this.dimension = n;       horizontal = new ArrayList<>();       vertical = new ArrayList<>();       leftDiagonal = new HashMap<>();       rightDiagonal = new HashMap<>();       for (int i = 0; i < n; i++) {           horizontal.add(i, new HashMap<>());           vertical.add(i, new HashMap<>());       }    }    @Override    public boolean checkWinner(int row, int col, Player player) {        Map<String, Integer> hori = horizontal.get(row);        hori.put(player.getSymbol(), hori.getOrDefault(player.getSymbol(), 0) + 1);        if (hori.get(player.getSymbol()) == dimension) {            return true;        }        Map<String, Integer> ver = vertical.get(row);        ver.put(player.getSymbol(), ver.getOrDefault(player.getSymbol(), 0) + 1);        if (ver.get(player.getSymbol()) == dimension) {            return true;        }        // check it's capable for filling horizontals        if (row == col) {            leftDiagonal.put(player.getSymbol(), leftDiagonal.getOrDefault(player.getSymbol(), 0) + 1);        }        if (row + col == dimension - 1) {            rightDiagonal.put(player.getSymbol(), rightDiagonal.getOrDefault(player.getSymbol(), 0) + 1);        }        if (leftDiagonal.getOrDefault(player.getSymbol(), 0) == dimension) {            return true;        }        return rightDiagonal.getOrDefault(player.getSymbol(), 0) == dimension;    }}